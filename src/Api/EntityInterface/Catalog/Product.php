<?php
/**
 * B2W Digital - Companhia Digital
 *
 * Do not edit this file if you want to update this SDK for future new versions.
 * For support please contact the e-mail bellow:
 *
 * sdk@e-smart.com.br
 *
 * @category  SkuHub
 * @package   SkuHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

namespace SkyHub\Api\EntityInterface\Catalog;

use SkyHub\Api\EntityInterface\Catalog\Product\MutualMethods;
use SkyHub\Api\EntityInterface\Catalog\Product\Variation;
use SkyHub\Api\EntityInterface\EntityAbstract;

class Product extends EntityAbstract
{
    
    use MutualMethods;
    
    
    /** string */
    const STATUS_DISABLED = 'disabled';
    
    /** string */
    const STATUS_ENABLED  = 'enabled';
    
    
    /**
     * @param bool|string $status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $status = $status ? self::STATUS_ENABLED : self::STATUS_DISABLED;

        $this->setData('status', $status);
        return $this;
    }
    
    
    /**
     * @return string
     */
    public function getStatus()
    {
        return (string) $this->getData('status');
    }


    /**
     * @return array
     */
    public function getStatusesAvailable()
    {
        return [
            self::STATUS_ENABLED,
            self::STATUS_DISABLED,
        ];
    }

    
    /**
     * @param string $name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->setData('name', (string) $name);
        return $this;
    }
    
    
    /**
     * @return string
     */
    public function getName()
    {
        return $this->getData('name');
    }
    
    
    /**
     * @param string $description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->setData('description', (string) $description);
        return $this;
    }
    
    
    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->getData('description');
    }
    
    
    /**
     * @param float $price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->setData('price', (float) $price);
        return $this;
    }
    
    
    /**
     * @return float
     */
    public function getPrice()
    {
        return (float) $this->getData('price');
    }
    
    
    /**
     * @param float|null $price
     *
     * @return $this
     */
    public function setPromotionalPrice($price = null)
    {
        if (!is_null($price)) {
            $price = (float) $price;
        }

        $this->setData('promotional_price', $price);
        return $this;
    }
    
    
    /**
     * @return float|null
     */
    public function getPromotionalPrice()
    {
        return $this->getData('promotional_price');
    }
    
    
    /**
     * @param float $price
     *
     * @return $this
     */
    public function setCost($price)
    {
        $this->setData('cost', (float) $price);
        return $this;
    }
    
    
    /**
     * @return float
     */
    public function getCost()
    {
        return (float) $this->getData('cost');
    }
    
    
    /**
     * @param float $weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->setData('weight', (float) $weight);
        return $this;
    }
    
    
    /**
     * @return float
     */
    public function getWeight()
    {
        return (float) $this->getData('weight');
    }
    
    
    /**
     * @param float $height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->setData('height', (float) $height);
        return $this;
    }
    
    
    /**
     * @return float
     */
    public function getHeight()
    {
        return (float) $this->getData('height');
    }
    
    
    /**
     * @param float $width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->setData('width', (float) $width);
        return $this;
    }
    
    
    /**
     * @return float
     */
    public function getWidth()
    {
        return (float) $this->getData('width');
    }
    
    
    /**
     * @param float $length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->setData('length', (float) $length);
        return $this;
    }
    
    
    /**
     * @return float
     */
    public function getLength()
    {
        return (float) $this->getData('length');
    }
    
    
    /**
     * @param string $brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->setData('brand', (string) $brand);
        return $this;
    }
    
    
    /**
     * @return string
     */
    public function getBrand()
    {
        return (string) $this->getData('brand');
    }
    
    
    /**
     * @param string $nbm
     *
     * @return $this
     */
    public function setNbm($nbm)
    {
        $this->setData('nbm', (string) $nbm);
        return $this;
    }
    
    
    /**
     * @return string
     */
    public function getNbm()
    {
        return (string) $this->getData('nbm');
    }
    
    
    /**
     * @return array
     */
    public function getCategories()
    {
        return (array) $this->getData('categories');
    }
    
    
    /**
     * @param string $code
     * @param string $name
     *
     * @return $this
     */
    public function addCategory($code, $name)
    {
        if (empty($code) || empty($name)) {
            return $this;
        }

        $data = (array) $this->getCategories();
        $data[] = [
            'code' => $code,
            'name' => $name,
        ];
        
        $this->setData('categories', $data);
        
        return $this;
    }
    
    
    /**
     * @return array
     */
    public function getVariationAttributes()
    {
        return (array) $this->getData('variation_attributes');
    }
    
    
    /**
     * @param string $code
     *
     * @return $this
     */
    public function addVariationAttribute($code)
    {
        $data   = $this->getVariationAttributes();
        $data[] = $code;
        
        $this->setData('variation_attributes', $data);
        
        return $this;
    }
    
    
    /**
     * @return array
     */
    public function getVariations()
    {
        return (array) $this->getData('variations');
    }


    /**
     * @return array
     */
    public function exportVariations()
    {
        $variations = [];

        /** @var Variation $variation */
        foreach ($this->getVariations() as $variation) {
            $variations[] = $variation->export();
        }

        return $variations;
    }
    
    
    /**
     * @param string $sku
     * @param float  $qty
     * @param string $ean
     *
     * @return Variation
     */
    public function addVariation($sku, $qty = 0.0000, $ean = null)
    {
        $variations = $this->getVariations();
        $variation  = new Variation($this->requestHandler());

        $variation->setSku($sku)
            ->setQty($qty)
            ->setEan($ean);
        
        /** @var Variation $_variation */
        foreach ($variations as $_variation) {
            if ($_variation->getSku() == $sku) {
                return $_variation;
            }
        }
        
        $variations[] = $variation;
        
        $this->setData('variations', $variations);
        
        return $variation;
    }


    /**
     * @return array
     */
    public function getAttributes()
    {
        $data = (array) $this->getData();

        unset(
            $data['variations'],
            $data['categories'],
            $data['images'],
            $data['specifications'],
            $data['variation_attributes']
        );

        return $data;
    }
    
    
    /**
     * @return array|bool|mixed|string
     */
    public function export()
    {
        $data       = (array) $this->getData();
        $variations = [];
        
        /** @var Variation $variation */
        foreach ($this->getVariations() as $variation) {
            $variations[] = $variation->export();
        }
        
        $data['variations'] = $variations;
        
        return (array) ['product' => $data];
    }
    
    
    /**
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function create()
    {
        $this->validate();
        
        /** @var \SkyHub\Api\Handler\Request\Catalog\ProductHandler $handler */
        $handler = $this->requestHandler();
        
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->create(
            $this->getSku(),
            $this->getAttributes(),
            $this->getImages(),
            $this->getCategories(),
            $this->getSpecifications(),
            $this->exportVariations(),
            $this->getVariationAttributes()
        );
        
        return $response;
    }
    
    
    /**
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function update()
    {
        $this->validate();
    
        /** @var \SkyHub\Api\Handler\Request\Catalog\ProductHandler $handler */
        $handler = $this->requestHandler();
    
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->update(
            $this->getSku(),
            $this->getAttributes(),
            $this->getImages(),
            $this->getCategories(),
            $this->getSpecifications(),
            $this->exportVariations(),
            $this->getVariationAttributes()
        );
        
        return $response;
    }
    
    
    /**
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function delete()
    {
        /** @var \SkyHub\Api\Handler\Request\Catalog\ProductHandler $handler */
        $handler = $this->requestHandler();
    
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->delete($this->getSku());
        
        return $response;
    }
    
    
    /**
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function product()
    {
        /** @var \SkyHub\Api\Handler\Request\Catalog\ProductHandler $handler */
        $handler = $this->requestHandler();
    
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->product($this->getSku());
        
        return $response;
    }
    
    
    /**
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function products()
    {
        /** @var \SkyHub\Api\Handler\Request\Catalog\ProductHandler $handler */
        $handler = $this->requestHandler();
    
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->products($this->getStatus());
        
        return $response;
    }
    
    
    /**
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function urls()
    {
        /** @var \SkyHub\Api\Handler\Request\Catalog\ProductHandler $handler */
        $handler = $this->requestHandler();
    
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->urls();
    
        return $response;
    }
}
