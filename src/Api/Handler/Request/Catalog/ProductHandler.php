<?php
/**
 * B2W Digital - Companhia Digital
 *
 * Do not edit this file if you want to update this SDK for future new versions.
 * For support please contact the e-mail bellow:
 *
 * sdk@e-smart.com.br
 *
 * @category  SkuHub
 * @package   SkuHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

namespace SkyHub\Api\Handler\Request\Catalog;

use SkyHub\Api\EntityInterface\Catalog\Product;
use SkyHub\Api\Handler\Request\HandlerAbstract;
use SkyHub\Api\DataTransformer\Catalog\Product\Variation\Create as CreateVariationTransformer;
use SkyHub\Api\DataTransformer\Catalog\Product\Create as CreateTransformer;
use SkyHub\Api\DataTransformer\Catalog\Product\Update as UpdateTransformer;

class ProductHandler extends HandlerAbstract
{
    /**
     * @var string
     */
    const PRODUCT_FILTER_SKU = 'sku';

    /**
     * @var string
     */
    const PRODUCT_FILTER_NAME = 'name';

    /**
     * @var string
     */
    const PRODUCT_FILTER_STATUS = 'status';

    /**
     * @var string
     */
    const PRODUCT_FILTER_QTY_FROM = 'qty_from';

    /**
     * @var string
     */
    const PRODUCT_FILTER_QTY_TO = 'qty_to';

    /**
     * @var string
     */
    const PRODUCT_FILTER_CATEGORIES = 'categories';

    /**
     * @var string
     */
    protected $baseUrlPath = '/products';

    /**
     * @param string $sku
     * @param array  $attributes
     * @param array  $images
     * @param array  $categories
     * @param array  $specifications
     * @param array  $variations
     * @param array  $variationAttributes
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function create(
        $sku,
        array $attributes,
        array $images = [],
        array $categories = [],
        array $specifications = [],
        array $variations = [],
        array $variationAttributes = []
    ) {
        $transformer = new CreateTransformer(
            $sku,
            $attributes,
            $images,
            $categories,
            $specifications,
            $variations,
            $variationAttributes
        );

        $body = $transformer->output();

        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $responseHandler */
        $responseHandler = $this->service()->post($this->baseUrlPath(), $body);
        return $responseHandler;
    }


    /**
     * @param string $sku
     * @param array  $attributes
     * @param array  $images
     * @param array  $categories
     * @param array  $specifications
     * @param array  $variations
     * @param array  $variationAttributes
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function update(
        $sku,
        array $attributes,
        array $images = [],
        array $categories = [],
        array $specifications = [],
        array $variations = [],
        array $variationAttributes = []
    ) {
        $transformer = new UpdateTransformer(
            $sku,
            $attributes,
            $images,
            $categories,
            $specifications,
            $variations,
            $variationAttributes
        );

        $body = $transformer->output();

        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $responseHandler */
        $responseHandler = $this->service()->put($this->baseUrlPath($sku), $body);
        return $responseHandler;
    }

    /**
     * @param int   $page
     * @param int   $perPage
     * @param array $filters
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function products(int $page = 1, int $perPage = 100, array $filters = [])
    {
        $allowedFilters = [
            self::PRODUCT_FILTER_SKU,
            self::PRODUCT_FILTER_NAME,
            self::PRODUCT_FILTER_STATUS,
            self::PRODUCT_FILTER_QTY_FROM,
            self::PRODUCT_FILTER_QTY_TO,
            self::PRODUCT_FILTER_CATEGORIES,
        ];

        $query = [];

        foreach ($filters as $key => $value) {
            if (!in_array($key, $allowedFilters)) {
                continue;
            }

            $query[$key] = $value;
        }

        /**
         * This needs to go here to override the values passed in $filters.
         */
        $query['page']     = (int) $page;
        $query['per_page'] = (int) $perPage;

        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $responseHandler */
        $responseHandler = $this->service()->get($this->baseUrlPath(null, $query));
        return $responseHandler;
    }


    /**
     * @param string $sku
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function product($sku)
    {
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $responseHandler */
        $responseHandler = $this->service()->get($this->baseUrlPath($sku));
        return $responseHandler;
    }


    /**
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function urls()
    {
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $responseHandler */
        $responseHandler = $this->service()->get($this->baseUrlPath('/urls'));
        return $responseHandler;
    }


    /**
     * @param string $sku
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function delete($sku)
    {
        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $responseHandler */
        $responseHandler = $this->service()->delete($this->baseUrlPath($sku));
        return $responseHandler;
    }


    /**
     * @param string $sku
     * @param string $variationSku
     * @param string $variationQty
     * @param string $variationEan
     * @param array  $variationImages
     * @param array  $variationSpecifications
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function createVariation(
        $sku,
        $variationSku,
        $variationQty,
        $variationEan,
        array $variationImages = [],
        array $variationSpecifications = []
    ) {
        $transformer = new CreateVariationTransformer(
            $variationSku,
            $variationQty,
            $variationEan,
            $variationImages,
            $variationSpecifications
        );

        $body = $transformer->output();

        /** @var \SkyHub\Api\Handler\Response\HandlerInterface $responseHandler */
        $responseHandler = $this->service()->post($this->baseUrlPath("{$sku}/variations"), $body);
        return $responseHandler;
    }


    /**
     * @return Product
     */
    public function entityInterface()
    {
        return new Product($this);
    }
}
