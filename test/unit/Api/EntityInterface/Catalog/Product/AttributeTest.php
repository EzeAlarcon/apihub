<?php

namespace SkyHubTest\Api\EntityInterface\Catalog\Product;

use PHPUnit\Framework\TestCase;
use SkyHub\Api;
use SkyHub\Api\EntityInterface\Catalog\Product;

/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  SkuHubTest
 * @package   SkuHubTest
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */
class AttributeTest extends TestCase
{

    /** @var Api */
    protected $api;

    /** @var Product\Attribute */
    protected $attribute;


    protected function setUp()
    {
        $this->api = new Api('', '');
        $this->attribute = $this->api->productAttribute()->entityInterface();
    }


    /**
     * @test
     */
    public function isProductAttributeEntityInterfaceCorrectInstance()
    {
        $this->assertInstanceOf(Product\Attribute::class, $this->attribute);
    }


    /**
     * @test
     */
    public function productAttributeCodeSetterAndGetterCheck()
    {
        $attribute = $this->getFilledAttribute();

        $this->assertInternalType('string', $attribute->getCode());
        $this->assertEquals('color', $attribute->getCode());
    }


    /**
     * @test
     */
    public function productAttributeLabelSetterAndGetterCheck()
    {
        $attribute = $this->getFilledAttribute();

        $this->assertInternalType('string', $attribute->getLabel());
        $this->assertEquals('Color', $attribute->getLabel());
    }


    /**
     * @test
     */
    public function productAttributeOptionsSetterAndGetterCheck()
    {
        $attribute = $this->getFilledAttribute();

        $expected = [
            'Black',
            'White',
            'Red',
            'Yellow',
        ];

        $this->assertInternalType('array', $attribute->getOptions());
        $this->assertEquals($expected, $attribute->getOptions());
    }


    /**
     * @test
     */
    public function productCheckCompleteFillAndExport()
    {
        /** @var Product\Attribute $attribute */
        $attribute = $this->getFilledAttribute();

        $expected = [
            'attribute' => [
                'code' => 'color',
                'label' => 'Color',
                'options' => [
                    'Black',
                    'White',
                    'Red',
                    'Yellow',
                ]
            ]
        ];

        $this->assertEquals($expected, $attribute->export());
    }


    /**
     * @return Product\Attribute;
     */
    protected function getFilledAttribute()
    {
        $attribute = $this->attribute;

        $attribute->setCode('color')
            ->setLabel('Color')
            ->addOption('Black')
            ->addOption('White')
            ->addOption('Red')
            ->addOption('Yellow')
        ;

        return $attribute;
    }
}
