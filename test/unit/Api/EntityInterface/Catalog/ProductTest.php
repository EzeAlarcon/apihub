<?php

namespace SkyHubTest\Api\EntityInterface\Catalog;

use PHPUnit\Framework\TestCase;
use SkyHub\Api;
use SkyHub\Api\EntityInterface\Catalog\Product;

/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  SkuHubTest
 * @package   SkuHubTest
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */
class ProductTest extends TestCase
{

    /** @var Api */
    protected $api;

    /** @var Product */
    protected $product;


    protected function setUp()
    {
        $this->api = new Api('', '');
        $this->product = $this->api->product()->entityInterface();
    }


    /**
     * @test
     */
    public function isProductEntityInterfaceCorrectInstance()
    {
        $this->assertInstanceOf(Product::class, $this->product);
    }


    /**
     * @test
     */
    public function setProductData()
    {
        $key = 'type';
        $data = 'Sample Product';

        $this->assertInstanceOf(Product::class, $this->product->setData($key, $data));
        $this->assertInternalType('string', $this->product->getData($key));
        $this->assertEquals($data, $this->product->getData($key));
    }


    /**
     * @test
     */
    public function setProductName()
    {
        $name = 'Sample Product';

        $this->assertInstanceOf(Product::class, $this->product->setName($name));
        $this->assertInternalType('string', $this->product->getName());
        $this->assertEquals($name, $this->product->getName());
    }


    /**
     * @test
     */
    public function setProductDescription()
    {
        $description = 'Sample Product Description';

        $this->assertInstanceOf(Product::class, $this->product->setDescription($description));
        $this->assertInternalType('string', $this->product->getDescription());
        $this->assertEquals($description, $this->product->getDescription());
    }


    /**
     * @test
     */
    public function setProductSku()
    {
        $sku = 'sample_product';

        $this->assertInstanceOf(Product::class, $this->product->setSku($sku));
        $this->assertInternalType('string', $this->product->getSku());
        $this->assertEquals($sku, $this->product->getSku());
    }


    /**
     * @test
     */
    public function setProductStatuses()
    {
        $status = Product::STATUS_ENABLED;

        $this->assertInstanceOf(Product::class, $this->product->setStatus(true));
        $this->assertInternalType('string', $this->product->getStatus());
        $this->assertEquals($status, $this->product->getStatus());

        $status = Product::STATUS_DISABLED;

        $this->assertInstanceOf(Product::class, $this->product->setStatus(false));
        $this->assertInternalType('string', $this->product->getStatus());
        $this->assertEquals($status, $this->product->getStatus());

        $this->assertCount(2, $this->product->getStatusesAvailable());
        $this->assertEquals([Product::STATUS_ENABLED, Product::STATUS_DISABLED], $this->product->getStatusesAvailable());
    }


    /**
     * @test
     */
    public function setProductQty()
    {
        $status = Product::STATUS_ENABLED;

        $this->assertInstanceOf(Product::class, $this->product->setStatus($status));
        $this->assertInternalType('string', $this->product->getStatus());
        $this->assertEquals($status, $this->product->getStatus());
    }


    /**
     * @test
     */
    public function setProductPrice()
    {
        $data = 12.9989;

        $this->assertInstanceOf(Product::class, $this->product->setPrice($data));
        $this->assertInternalType('float', $this->product->getPrice());
        $this->assertEquals($data, $this->product->getPrice());
    }


    /**
     * @test
     */
    public function setProductPromotionalPrice()
    {
        $data = 12.9989;

        $this->assertInstanceOf(Product::class, $this->product->setPromotionalPrice($data));
        $this->assertInternalType('float', $this->product->getPromotionalPrice());
        $this->assertEquals($data, $this->product->getPromotionalPrice());
    }


    /**
     * @test
     */
    public function setProductCost()
    {
        $data = 12.9989;

        $this->assertInstanceOf(Product::class, $this->product->setCost($data));
        $this->assertInternalType('float', $this->product->getCost());
        $this->assertEquals($data, $this->product->getCost());
    }


    /**
     * @test
     */
    public function setProductWeight()
    {
        $data = 1.878;

        $this->assertInstanceOf(Product::class, $this->product->setWeight($data));
        $this->assertInternalType('float', $this->product->getWeight());
        $this->assertEquals($data, $this->product->getWeight());
    }


    /**
     * @test
     */
    public function setProductHeight()
    {
        $data = 1.878;

        $this->assertInstanceOf(Product::class, $this->product->setHeight($data));
        $this->assertInternalType('float', $this->product->getHeight());
        $this->assertEquals($data, $this->product->getHeight());
    }


    /**
     * @test
     */
    public function setProductWidth()
    {
        $data = 1.878;

        $this->assertInstanceOf(Product::class, $this->product->setWidth($data));
        $this->assertInternalType('float', $this->product->getWidth());
        $this->assertEquals($data, $this->product->getWidth());
    }


    /**
     * @test
     */
    public function setProductLength()
    {
        $data = 1.878;

        $this->assertInstanceOf(Product::class, $this->product->setLength($data));
        $this->assertInternalType('float', $this->product->getLength());
        $this->assertEquals($data, $this->product->getLength());
    }


    /**
     * @test
     */
    public function setProductBrand()
    {
        $data = 'Nike';

        $this->assertInstanceOf(Product::class, $this->product->setBrand($data));
        $this->assertInternalType('string', $this->product->getBrand());
        $this->assertEquals($data, $this->product->getBrand());
    }


    /**
     * @test
     */
    public function setProductEan()
    {
        $data = '087689769876986';

        $this->assertInstanceOf(Product::class, $this->product->setEan($data));
        $this->assertInternalType('string', $this->product->getEan());
        $this->assertEquals($data, $this->product->getEan());
    }


    /**
     * @test
     */
    public function setProductNbm()
    {
        $data = '087689769876986';

        $this->assertInstanceOf(Product::class, $this->product->setNbm($data));
        $this->assertInternalType('string', $this->product->getNbm());
        $this->assertEquals($data, $this->product->getNbm());
    }


    /**
     * @test
     */
    public function addProductCategoriesAndCheckThemAfter()
    {
        $this->product->addCategory('category001', 'Jewels');
        $this->product->addCategory('category002', 'Watches');

        $this->assertCount(2, $this->product->getCategories());
        $this->assertInternalType('array', $this->product->getCategories());

        $expected = [
            [
                'code' => 'category001',
                'name' => 'Jewels'
            ], [
                'code' => 'category002',
                'name' => 'Watches'
            ]
        ];

        $this->assertEquals($expected, $this->product->getCategories());
    }


    /**
     * @test
     */
    public function addProductImagesAndCheckThemAfter()
    {
        $this->product->addImage('http://sourceToImage001.jpg');
        $this->product->addImage('http://sourceToImage002.jpg');
        $this->product->addImage('http://sourceToImage003.jpg');

        $this->assertCount(3, $this->product->getImages());
        $this->assertInternalType('array', $this->product->getImages());

        $expected = [
            'http://sourceToImage001.jpg',
            'http://sourceToImage002.jpg',
            'http://sourceToImage003.jpg',
        ];

        $this->assertEquals($expected, $this->product->getImages());
    }


    /**
     * @test
     */
    public function addProductSpecificationsAndCheckThemAfter()
    {
        $this->product->addSpecification('color', 'green');
        $this->product->addSpecification('brand', 'Nike');
        $this->product->addSpecification('size', 'G');

        $this->assertCount(3, $this->product->getSpecifications());
        $this->assertInternalType('array', $this->product->getSpecifications());

        $expected = [
            [
                'key'   => 'color',
                'value' => 'green'
            ], [
                'key'   => 'brand',
                'value' => 'Nike'
            ], [
                'key'   => 'size',
                'value' => 'G'
            ]
        ];

        $this->assertEquals($expected, $this->product->getSpecifications());
    }


    /**
     * @test
     */
    public function addProductVariationAttributesAndCheckThemAfter()
    {
        $this->product->addVariationAttribute('size');
        $this->product->addVariationAttribute('color');
        $this->product->addVariationAttribute('voltage');

        $this->assertCount(3, $this->product->getVariationAttributes());
        $this->assertInternalType('array', $this->product->getVariationAttributes());

        $expected = [
            'size',
            'color',
            'voltage',
        ];

        $this->assertEquals($expected, $this->product->getVariationAttributes());
    }


    /**
     * @test
     */
    public function addProductVariationsAndCheckThemAfter()
    {
        $variation = $this->product->addVariation('sku1234', 123, 'foo');

        $this->assertInstanceOf(Product\Variation::class, $variation);
        $this->assertInternalType('array', $this->product->getVariations());
        $this->assertCount(1, $this->product->getVariations());


        /** Test Images for Variation */

        $variation->addImage('http://sourceToImage001.jpg');
        $variation->addImage('http://sourceToImage002.jpg');
        $variation->addImage('http://sourceToImage003.jpg');

        $this->assertCount(3, $variation->getImages());
        $this->assertInternalType('array', $variation->getImages());

        $expected = [
            'http://sourceToImage001.jpg',
            'http://sourceToImage002.jpg',
            'http://sourceToImage003.jpg',
        ];

        $this->assertEquals($expected, $variation->getImages());


        /** Test Specifications for Variation */

        $variation->addSpecification('color', 'green');
        $variation->addSpecification('brand', 'Nike');
        $variation->addSpecification('size', 'G');

        $this->assertCount(3, $variation->getSpecifications());
        $this->assertInternalType('array', $variation->getSpecifications());

        $expected = [
            [
                'key'   => 'color',
                'value' => 'green'
            ], [
                'key'   => 'brand',
                'value' => 'Nike'
            ], [
                'key'   => 'size',
                'value' => 'G'
            ]
        ];

        $this->assertEquals($expected, $variation->getSpecifications());
    }


    /**
     * @test
     */
    public function productCheckAttributesFillAndExport()
    {
        $product = $this->getFilledProduct();

        $expected = [
            'sku' => 'sku123',
            'name' => 'Sample Product',
            'description' => 'Sample Product Description',
            'status' => 'enabled',
            'qty' => 123,
            'price' => 2.3458,
            'promotional_price' => 1.9876,
            'cost' => 1.2090,
            'weight' => 1.45,
            'height' => 1.45,
            'width' => 1.45,
            'length' => 1.45,
            'brand' => 'Nike',
            'ean' => '01234567890',
            'nbm' => '11234567890'
        ];

        $this->assertEquals($expected, $product->getAttributes());
    }


    /**
     * @test
     */
    public function productCheckCompleteFillAndExport()
    {
        /** @var Product $product */
        $product = $this->getFilledProduct();

        $expected = [
            'product' => [
                'sku' => 'sku123',
                'name' => 'Sample Product',
                'description' => 'Sample Product Description',
                'status' => 'enabled',
                'qty' => 123,
                'price' => 2.3458,
                'promotional_price' => 1.9876,
                'cost' => 1.2090,
                'weight' => 1.45,
                'height' => 1.45,
                'width' => 1.45,
                'length' => 1.45,
                'brand' => 'Nike',
                'ean' => '01234567890',
                'nbm' => '11234567890',
                'categories' => [
                    [
                        'code' => 'foo',
                        'name' => 'Foo > Foo',
                    ],
                    [
                        'code' => 'bar',
                        'name' => 'Bar > Bar',
                    ]
                ],
                'images' => [
                    'http://sourceimage001.jpg',
                    'http://sourceimage002.jpg',
                    'http://sourceimage003.jpg'
                ],
                'specifications' => [
                    [
                        'key' => 'color',
                        'value' => 'Black',
                    ], [
                        'key' => 'size',
                        'value' => 'XL',
                    ], [
                        'key' => 'voltage',
                        'value' => '220v',
                    ]
                ],
                'variation_attributes' => [
                    'color',
                    'size'
                ],
                'variations' => [
                    [
                        'sku' => 'variation001',
                        'qty' => 100,
                        'ean' => '9876565',
                        'images' => [
                            'http://variation-sourceimage001.jpg',
                            'http://variation-sourceimage002.jpg',
                            'http://variation-sourceimage003.jpg',
                        ],
                        'specifications' => [
                            [
                                'key' => 'color',
                                'value' => 'White'
                            ],
                            [
                                'key' => 'size',
                                'value' => 'S'
                            ]
                        ],
                    ]
                ],
            ]
        ];

        $this->assertEquals($expected, $product->export());
    }


    /**
     * @return Product
     */
    protected function getFilledProduct()
    {
        $product = $this->product;

        $product->setSku('sku123')
            ->setName('Sample Product')
            ->setDescription('Sample Product Description')
            ->setStatus($product::STATUS_ENABLED)
            ->setQty(123)
            ->setPrice(2.3458)
            ->setPromotionalPrice(1.9876)
            ->setCost(1.2090)
            ->setWeight(1.45)
            ->setHeight(1.45)
            ->setWidth(1.45)
            ->setLength(1.45)
            ->setBrand('Nike')
            ->setEan('01234567890')
            ->setNbm('11234567890')
            ->addCategory('foo', 'Foo > Foo')
            ->addCategory('bar', 'Bar > Bar')
            ->addImage('http://sourceimage001.jpg')
            ->addImage('http://sourceimage002.jpg')
            ->addImage('http://sourceimage003.jpg')
            ->addSpecification('color', 'Black')
            ->addSpecification('size', 'XL')
            ->addSpecification('voltage', '220v')
            ->addVariationAttribute('color')
            ->addVariationAttribute('size');

        /** @var Product\Variation $variation */
        $variation = $product->addVariation('variation001', 100, '9876565');
        $variation->addImage('http://variation-sourceimage001.jpg')
            ->addImage('http://variation-sourceimage002.jpg')
            ->addImage('http://variation-sourceimage003.jpg')
            ->addSpecification('color', 'White')
            ->addSpecification('size', 'S');

        return $product;
    }
}
